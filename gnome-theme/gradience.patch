diff --git a/gradience/backend/theming/shell.py b/gradience/backend/theming/shell.py
index 18e7890f..92786a73 100644
--- a/gradience/backend/theming/shell.py
+++ b/gradience/backend/theming/shell.py
@@ -71,12 +71,6 @@ class ShellTheme:
         self.THEME_GSETTINGS_DIR = os.path.join(GLib.get_home_dir(), ".local/share/",
             "gnome-shell", "extensions", self.THEME_EXT_NAME, "schemas")
 
-        try:
-            settings_retriever = FlatpakGSettings if is_sandboxed() else GSettingsSetting
-            schema_dir = self.THEME_GSETTINGS_DIR if os.path.exists(self.THEME_GSETTINGS_DIR) else None
-            self.settings = settings_retriever(self.THEME_GSETTINGS_SCHEMA_ID, schema_dir=schema_dir)
-        except (GSettingsMissingError, GLib.GError):
-            raise
 
         version_target_str = str(self.version_target)
         # Theme source/output paths
@@ -87,9 +81,13 @@ class ShellTheme:
             shutil.rmtree(self.source_dir)
 
         # Copy shell theme source directories to ~/.cache/gradience/gradience-shell
+        def copy_with_permissions(src, dst, symlinks=False, ignore=None):
+            shutil.copy2(src, dst)
+            # Modify permissions of the copied file
+            os.chmod(dst, 0o644)  # Adjust permissions as needed
         shutil.copytree(
             os.path.join(datadir, "gradience", "shell", version_target_str),
-            self.source_dir, dirs_exist_ok=True
+            self.source_dir, dirs_exist_ok=True, copy_function=copy_with_permissions
         )
 
         # TODO: Allow user to use different name than "gradience-shell" (also, with default name, we should append "-light" suffix when generated from light preset)
@@ -252,15 +250,15 @@ class ShellTheme:
     def _set_shell_theme(self):
         key = self.THEME_GSETTINGS_SCHEMA_KEY
 
-        # Set default theme
-        self.settings.reset(key)
-
-        if is_sandboxed():
-            # Set theme generated by Gradience
-            self.settings.set(key, "gradience-shell")
-        else:
-            # Set theme generated by Gradience
-            self.settings.set_string(key, "gradience-shell")
+        # # Set default theme
+        # self.settings.reset(key)
+        #
+        # if is_sandboxed():
+        #     # Set theme generated by Gradience
+        #     self.settings.set(key, "gradience-shell")
+        # else:
+        #     # Set theme generated by Gradience
+        #     self.settings.set_string(key, "gradience-shell")
 
     def _detect_shell_version(self):
         shell_ver = get_shell_version()
@@ -288,7 +286,7 @@ class ShellTheme:
         key = self.THEME_GSETTINGS_SCHEMA_KEY
 
         # Set default theme
-        self.settings.reset(key)
+        # self.settings.reset(key)
 
     def _reset_theme_thread(self, task:Gio.Task, source_object:GObject.Object,
                 task_data:object, cancellable:Gio.Cancellable):
diff --git a/gradience/frontend/cli/cli.in b/gradience/frontend/cli/cli.in
index e827ca44..ace5d524 100755
--- a/gradience/frontend/cli/cli.in
+++ b/gradience/frontend/cli/cli.in
@@ -409,8 +409,8 @@ class CLI:
 
         shell_engine = ShellTheme()
 
-        is_user_themes_available = is_shell_ext_installed(shell_engine.THEME_EXT_NAME)
-        is_user_themes_enabled = is_shell_ext_installed(shell_engine.THEME_EXT_NAME, check_enabled=True)
+        is_user_themes_available = True
+        is_user_themes_enabled = True
 
         if not is_user_themes_available:
             logging.warning("Gradience requires User Themes extension installed in order to apply Shell theme. You can still generate a theme, but you won't be able to apply it without this extension.")
